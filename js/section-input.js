import { create as createInputSum } from './input-sum.js';
function generateContainer(parentContainer) {
    const sectionContainers = parentContainer.querySelectorAll('.cmp-section-container');
    sectionContainers.forEach((sectionContainer, i) => {
        sectionContainer.querySelector('.cmp-section-no').textContent = (i + 1).toString();
        sectionContainer.querySelector('.cmd-delete-section').disabled =
            false;
    });
    if (sectionContainers.length === 1) {
        parentContainer.querySelector('.cmp-section-container .cmd-delete-section').disabled = true;
    }
}
function add(parentContainer) {
    const tmpSection = document.querySelector('template#tmp-section');
    const fragment = tmpSection.content.cloneNode(true);
    createInputSum(fragment.querySelector('.cmp-section-container'));
    parentContainer
        .querySelector('.cmp-sections-container')
        .append(fragment);
    generateContainer(parentContainer);
}
function remove(container, parentContainer) {
    container.remove();
    generateContainer(parentContainer);
}
export function create(parentContainer) {
    parentContainer.addEventListener('click', (ev) => {
        const elem = ev.target;
        if (elem.matches('.cmd-add-section')) {
            add(parentContainer);
        }
        else if (elem.matches('.cmd-delete-section')) {
            const container = elem.closest('.cmp-section-container');
            remove(container, parentContainer);
        }
    });
    add(parentContainer);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjdGlvbi1pbnB1dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9qcy9zZWN0aW9uLWlucHV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLElBQUksY0FBYyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHMUQsU0FBUyxpQkFBaUIsQ0FBQyxlQUE2QjtJQUNwRCxNQUFNLGlCQUFpQixHQUFHLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0lBQ3JGLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzlDLGdCQUFnQixDQUFDLGFBQWEsQ0FBWSxpQkFBaUIsQ0FBRSxDQUFDLFdBQVcsR0FBRyxDQUN4RSxDQUFDLEdBQUcsQ0FBQyxDQUNOLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDZixnQkFBZ0IsQ0FBQyxhQUFhLENBQWEscUJBQXFCLENBQUUsQ0FBQyxRQUFRO1lBQzNFLEtBQUssQ0FBQztJQUNWLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBRyxpQkFBaUIsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQy9CLGVBQWUsQ0FBQyxhQUFhLENBQ3pCLDRDQUE0QyxDQUMxQyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7S0FDdEI7QUFDUCxDQUFDO0FBRUgsU0FBUyxHQUFHLENBQUMsZUFBNkI7SUFDdEMsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBYyxzQkFBc0IsQ0FBRSxDQUFDO0lBQ2hGLE1BQU0sUUFBUSxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBc0IsQ0FBQztJQUV6RSxjQUFjLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBZSx3QkFBd0IsQ0FBRSxDQUFDLENBQUM7SUFFaEYsZUFBZTtTQUNkLGFBQWEsQ0FBZSx5QkFBeUIsQ0FBRTtTQUN2RCxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFbEIsaUJBQWlCLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDdkMsQ0FBQztBQUVELFNBQVMsTUFBTSxDQUFDLFNBQXVCLEVBQUUsZUFBNkI7SUFDbEUsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBRW5CLGlCQUFpQixDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3ZDLENBQUM7QUFFRCxNQUFNLFVBQVUsTUFBTSxDQUFDLGVBQTZCO0lBQ2hELGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRTtRQUM3QyxNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsTUFBb0IsQ0FBQztRQUVyQyxJQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsRUFBRTtZQUNqQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7U0FDeEI7YUFDSSxJQUFHLElBQUksQ0FBQyxPQUFPLENBQUMscUJBQXFCLENBQUMsRUFBRTtZQUN6QyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFlLHdCQUF3QixDQUFFLENBQUM7WUFFeEUsTUFBTSxDQUFDLFNBQVMsRUFBRSxlQUFlLENBQUMsQ0FBQztTQUN0QztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRVAsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBRXJCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGUgYXMgY3JlYXRlSW5wdXRTdW0gfSBmcm9tICcuL2lucHV0LXN1bS5qcyc7XG5pbXBvcnQgKiBhcyBFVCBmcm9tICcuL2VsZW1lbnQtdHlwZS5qcyc7XG5cbmZ1bmN0aW9uIGdlbmVyYXRlQ29udGFpbmVyKHBhcmVudENvbnRhaW5lcjogRVQuQ29udGFpbmVyKTogdm9pZCB7XG4gICAgY29uc3Qgc2VjdGlvbkNvbnRhaW5lcnMgPSBwYXJlbnRDb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLmNtcC1zZWN0aW9uLWNvbnRhaW5lcicpO1xuICAgIHNlY3Rpb25Db250YWluZXJzLmZvckVhY2goKHNlY3Rpb25Db250YWluZXIsIGkpID0+IHtcbiAgICAgICAgc2VjdGlvbkNvbnRhaW5lci5xdWVyeVNlbGVjdG9yPEVULk51bWJlcj4oJy5jbXAtc2VjdGlvbi1ubycpIS50ZXh0Q29udGVudCA9IChcbiAgICAgICAgICAgIGkgKyAxXG4gICAgICAgICAgKS50b1N0cmluZygpO1xuICAgICAgICBzZWN0aW9uQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3I8RVQuQ29tbWFuZD4oJy5jbWQtZGVsZXRlLXNlY3Rpb24nKSEuZGlzYWJsZWQgPVxuICAgICAgICBmYWxzZTtcbiAgICB9KTtcblxuICAgIGlmKHNlY3Rpb25Db250YWluZXJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBwYXJlbnRDb250YWluZXIucXVlcnlTZWxlY3RvcjxFVC5Db21tYW5kPihcbiAgICAgICAgICAgICcuY21wLXNlY3Rpb24tY29udGFpbmVyIC5jbWQtZGVsZXRlLXNlY3Rpb24nXG4gICAgICAgICAgICApIS5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgfVxuXG5mdW5jdGlvbiBhZGQocGFyZW50Q29udGFpbmVyOiBFVC5Db250YWluZXIpOiB2b2lkIHtcbiAgICBjb25zdCB0bXBTZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcjxFVC5UZW1wbGF0ZT4oJ3RlbXBsYXRlI3RtcC1zZWN0aW9uJykhO1xuICAgIGNvbnN0IGZyYWdtZW50ID0gdG1wU2VjdGlvbi5jb250ZW50LmNsb25lTm9kZSh0cnVlKWFzIEVULlRlbXBsYXRlQ29udGVudDtcblxuICAgIGNyZWF0ZUlucHV0U3VtKGZyYWdtZW50LnF1ZXJ5U2VsZWN0b3I8RVQuQ29udGFpbmVyPignLmNtcC1zZWN0aW9uLWNvbnRhaW5lcicpISk7XG5cbiAgICBwYXJlbnRDb250YWluZXJcbiAgICAucXVlcnlTZWxlY3RvcjxFVC5Db250YWluZXI+KCcuY21wLXNlY3Rpb25zLWNvbnRhaW5lcicpIVxuICAgIC5hcHBlbmQoZnJhZ21lbnQpO1xuXG4gICAgZ2VuZXJhdGVDb250YWluZXIocGFyZW50Q29udGFpbmVyKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKGNvbnRhaW5lcjogRVQuQ29udGFpbmVyLCBwYXJlbnRDb250YWluZXI6IEVULkNvbnRhaW5lcikge1xuICAgIGNvbnRhaW5lci5yZW1vdmUoKTtcblxuICAgIGdlbmVyYXRlQ29udGFpbmVyKHBhcmVudENvbnRhaW5lcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGUocGFyZW50Q29udGFpbmVyOiBFVC5Db250YWluZXIpICB7XG4gICAgcGFyZW50Q29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2KSA9PiB7XG4gICAgICAgIGNvbnN0IGVsZW0gPSBldi50YXJnZXQgYXMgRVQuQ29tbWFuZDtcblxuICAgICAgICBpZihlbGVtLm1hdGNoZXMoJy5jbWQtYWRkLXNlY3Rpb24nKSkge1xuICAgICAgICAgICAgYWRkKHBhcmVudENvbnRhaW5lcik7XG4gICAgICAgIH0gXG4gICAgICAgIGVsc2UgaWYoZWxlbS5tYXRjaGVzKCcuY21kLWRlbGV0ZS1zZWN0aW9uJykpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGVsZW0uY2xvc2VzdDxFVC5Db250YWluZXI+KCcuY21wLXNlY3Rpb24tY29udGFpbmVyJykhO1xuXG4gICAgICAgICAgICByZW1vdmUoY29udGFpbmVyLCBwYXJlbnRDb250YWluZXIpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbmFkZChwYXJlbnRDb250YWluZXIpO1xuXG59Il19